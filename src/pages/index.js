import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState, useEffect, useRef } from "react";
import track, { useTracking } from "react-tracking";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const possibleColors = ["colorBlue", "colorGreen", "colorRed", "colorGold"];

  const red = "colorRed";
  const blue = "colorBlue";
  const green = "colorGreen";
  const gold = "colorGold";

  const randomColorIndex = () => {
    return Math.floor(Math.random() * possibleColors.length);
  };

  const pickColors = () => {
    const array = [];
    for (let i = 0; i < 10; i++) {
      array.push(possibleColors[randomColorIndex()]);
    }
    return array;
  };

  const [pickedColors, setPickedColors] = useState(pickColors());

  const [amount, setAmount] = useState(0);

  const [disabled, setDisabled] = useState(false);

  const disableBtn = () => {
    setDisabled(true);
  };

  const ableBtn = () => {
    setDisabled(false);
  };

  useEffect(() => {
    document.getElementById("sequenceButton").onclick = async () => {
      sequencePlay(amount);
    };
  });

  const [aux, setAux] = useState(0);

  const compareArrays = (completeArray, partialArray, aux) => {
    var comp1 = partialArray.toString();
    var comp2 = completeArray[aux];
    setAux(aux + 1);
    if (comp1 !== comp2) {
      return false;
    } else {
      if (comp1.length == comp2.length) {
        return true;
      }
    }
  };

  const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  const blinkColor = async (color) => {
    const colorSquare = "square" + color.slice(5);
    document.getElementById(colorSquare).classList.add("colorActive");
    await delay(500);

    document.getElementById(colorSquare).classList.remove("colorActive");
    await delay(500);
  };

  const sequencePlay = async (quantid) => {
    for (let i = 0; i <= quantid; i++) {
      await delay(500);
      blinkColor(pickedColors[i]);
      await delay(500);
    }
  };

  const addClickerCheck = (color) => {
    document.getElementById("square" + color).onclick = async () => {
      if (!compareArrays(pickedColors, "color" + color, aux)) {
        document.getElementById("textResult").innerHTML = "ERRADO!";
        setAmount(0);
        setAux(0);
        ableBtn();
        setPickedColors(pickColors());
        $("#modalScore").modal("show");
      } else {
        if (amount == aux) {
          setAmount(amount + 1);
          setAux(0);
          await delay(1000);
          sequencePlay(amount + 1);
          document.getElementById("scoreBoard").innerHTML = amount + 1;
          document.getElementById("textResult").innerHTML = amount + 1;
        }
      }
    };
  };

  useEffect(() => {
    addClickerCheck("Blue");
    addClickerCheck("Green");
    addClickerCheck("Red");
    addClickerCheck("Gold");
  });

  return (
    <>
      <Head>
        <title>Jogo da mem√≥ria</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"
        ></link>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
      </Head>
      <main className={styles.main}>
        <div className={styles.section}>
          <div
            className={styles.colorSquare + " " + red}
            id="squareRed"
            style={{ "border-radius": "100px 0 0 0" }}
          ></div>

          <div
            className={styles.colorSquare + " " + blue}
            id="squareBlue"
            style={{ "border-radius": "0 0 0 100px" }}
          ></div>

          <div
            className={styles.colorSquare + " " + green}
            id="squareGreen"
            style={{ "border-radius": "0 100px 0 0 " }}
          ></div>

          <div
            className={styles.colorSquare + " " + gold}
            id="squareGold"
            style={{ "border-radius": "0 0 100px 0" }}
          ></div>
        </div>

        <div className={styles.center + styles.grid}>
          <button
            className="btn btn-primary"
            id="sequenceButton"
            disabled={disabled}
            onClick={disableBtn}
          >
            Iniciar
          </button>
        </div>

        <div className={styles.center + styles.grid}>
          <span className="badge badge-dark" id="textResult">
            ACERTOS
          </span>
        </div>

        <div
          className="modal fade"
          id="modalScore"
          tabIndex="-1"
          role="dialog"
          aria-labelledby="exampleModalCenterTitle"
          aria-hidden="true"
        >
          <div className="modal-dialog modal-dialog-centered" role="document">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title" id="">
                  Errou!
                </h5>
                <button
                  type="button"
                  className="close"
                  data-dismiss="modal"
                  aria-label="Close"
                >
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div className="modal-body" id="scoreBoard"></div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-secondary"
                  data-dismiss="modal"
                >
                  Close
                </button>
                <button type="button" className="btn btn-primary">
                  Save changes
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
