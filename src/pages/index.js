import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { useState, useEffect } from 'react';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [color, setColor] = useState("colorGreen");
  const possibleColors = ['colorBlue', 'colorGreen', 'colorRed', 'colorGold'];

  const red = 'colorRed';
  const blue = 'colorBlue';
  const green = 'colorGreen';
  const gold = 'colorGold';

  const randomColorIndex = () => {
    return Math.floor(Math.random() * possibleColors.length);
  }

  const [amount, setAmount] = useState(1);

  const pickColors = (numberOfColors) => {
    const array = [];
    for (let i = 0; i < numberOfColors; i++) {
      array.push(possibleColors[randomColorIndex()]);
    }
    return array;
  };

  const [pickedColors, setPickedColors] = useState(pickColors(amount));

  useEffect(() => {
    document.getElementById('sequenceButton').onclick = () => {
      setPickedColors(pickColors(amount));
    };
  })

  const clickedColors = [];

  const colorPush = (color) => {
    document.getElementById('square' + color).onclick = () => {
      clickedColors.push('color' + color);
    };
  }

  useEffect(() => {
    colorPush('Blue');
    colorPush('Green');
    colorPush('Red');
    colorPush('Gold');
  })

  const compareArrays = (pickedColors, clickedColors) => {
    if (pickedColors.length !== clickedColors.length)
      return false;
    else {
      // Comparing each element of your array
      for (var i = 0; i < pickedColors.length; i++) {
        if (pickedColors[i] !== clickedColors[i]) {
          setAmount(1);
          return false;
        } else {
          setAmount(amount + 1);
        }
      }
      return true;
    }
  };

  const delay = ms => new Promise(
    resolve => setTimeout(resolve, ms)
  );

  const blinkColor = async color => {
    const colorSquare = 'square' + color.slice(5);
    document.getElementById(colorSquare).classList.add('colorActive');
    await delay(500);

    document.getElementById(colorSquare).classList.remove('colorActive');
    await delay(500);
  };

  const sequencePlay = async event => {
    for (let i = 0; i < pickedColors.length; i++) {
      await delay(500);
      blinkColor(pickedColors[i]);
      await delay(500);
    }
  };

  useEffect(() => {
    document.getElementById('verifyResult').onclick = () => {
      if (compareArrays(pickedColors, clickedColors) == true) {
        document.getElementById('textResult').innerHTML = amount;
      }
      else {
        document.getElementById('textResult').innerHTML = "ERRADO!";
      }
    };
  })

  return (
    <>
      <Head>
        <title>Jogo da memória</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"></link>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
      </Head>
      <main className={styles.main}>

        <div className={styles.grid + styles.center}>
          <div className={styles.colorSquare + ' ' + red} id="squareRed" ></div>
        </div>

        <div className={styles.grid + styles.center}>
          <div className={styles.colorSquare + ' ' + blue} id="squareBlue"></div>
        </div>

        <div className={styles.grid + styles.center}>
          <div className={styles.colorSquare + ' ' + green} id="squareGreen"></div>
        </div>

        <div className={styles.grid + styles.center}>
          <div className={styles.colorSquare + ' ' + gold} id="squareGold"></div>
        </div>

        <button className="btn btn-primary" id='sequenceButton' onClick={sequencePlay}>
          Reproduzir sequência
        </button>

        <div id='gameResult'>
          <button id='verifyResult' className="btn btn-primary">
            Verificar
          </button>
        </div>

        <span class="badge badge-dark" id='textResult'>ACERTOS</span>

      </main>
    </>
  )
}
